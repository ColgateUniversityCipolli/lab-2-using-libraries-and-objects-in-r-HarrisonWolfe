artist=c()
for(i in 1:length(file.paths)){
artist = c(artist, str_split_i(file.paths[i], "/", 2))
album = c(album, str_split_i(file.paths[i], "/", 3))
}
full.name = c()
for(i in 1:14){
full.name = c(full.name, paste(artist[i], "-", album[i], "-", song[i], ".json", sep=""))
}
full.name
for(i in 1:14){
command <- paste("streaming_extractor_music.exe", shQuote(track), shQuote(output_filename))
code_to_process[i] <- command
}
for(i in 1:14){
command <- paste("streaming_extractor_music.exe", shQuote(track), shQuote(full.name))
code_to_process[i] <- command
}
for(i in 1:14){
command <- paste("streaming_extractor_music.exe", shQuote(track), shQuote(full.name))
code.to.process[i] <- command
}
code.to.process
for(i in 1:14){
command <- paste("streaming_extractor_music.exe", shQuote(song), shQuote(full.name), sep="")
code.to.process[i] <- command
}
code.to.process
for(i in 1:14){
command <- paste("streaming_extractor_music.exe","''"song[i]"''", shQuote(full.name[i]), sep="")
for(i in 1:14){
command <- paste("streaming_extractor_music.exe","''song[i]''", "''full.name[i])''", sep="")
code.to.process[i] <- command
}
code.to.process
for(i in 1:14){
command <- paste("streaming_extractor_music.exe", song[i], full.name[i]), sep="")
code.to.process
for(i in 1:14){
command <- paste(streaming_extractor_music.exe, song[i], full.name[i]), sep="")
commnad = c()
for(i in 1:14){
command <- paste(streaming_extractor_music.exe, song[i], full.name[i]), sep="")
for(i in 1:14){
command <- paste(streaming_extractor_music.exe, song[i], full.name[i]), sep="")
for(i in 1:14){
command <- paste("streaming_extractor_music.exe", song[i], full.name[i]), sep="")
full.name
song
files
for(i in 1:length(full.name)){
code.to.process[i] = paste(streaming extractor music.exe, "''"files[i]"''", "''"full.name[i]"''", sep="")
for(i in 1:length(full.name)){
code.to.process[i] = paste(streaming_extractor_music.exe, "''"files[i]"''", "''"full.name[i]"''", sep="")
for(i in 1:length(full.name)){
code.to.process[i] = paste(streaming_extractor_music.exe, files[i], full.name[i], sep="")
}
for(i in 1:length(full.name)){
code.to.process[i] = paste("streaming_extractor_music.exe", files[i], full.name[i], sep="")
}
code.to.process
for(i in 1:length(full.name)){
code.to.process[i] = paste("streaming_extractor_music.exe", files[i], full.name[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(streaming_extractor_music.exe, files[i], output[i], sep=" ")
}
output = c()
#Throwing everything together into an outpute file
for(i in 1:14){
output = c(output, paste(artist[i], "-", album[i], "-", song[i], ".json", sep=""))
}
output
for(i in 1:length(output)){
code.to.process[i] = paste(streaming_extractor_music.exe, files[i], output[i], sep=" ")
}
#Naming the thingy
command.thing = "streaming_extractor_music.exe"
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, files[i], output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, shQuote(files[i]), shQuote(output[i]), sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '"'files[i]'"', '"'output[i]'"', sep=" ")
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '"', files[i]'"', '"', output[i], '"', sep=" ")
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '"', files[i], '"', '"', output[i], '"', sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '"', files[i], '"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '\"', files[i], '\"', output[i], sep=" ")
}
code.to.process
code.to.process
#Naming the thingy
command.thing = streaming_extractor_music.exe
#Naming the thingy
command.thing = "streaming_extractor_music.exe"
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '"', files[i], '\"', output[i], sep=" ")
}
code.to.process
code.to.process[i] = paste(command.thing, files[i], output[i], sep=" ")
code.to.process
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, files[i], output[i], sep=" ")
}
code.to.process
song
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, files[i], output[i], sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '"'files[i]'"', '"'output[i]'"', sep=" ")
test = c()
test = paste('"')
test
test = c()
test = paste("''")
test
test = c()
test = paste(")
test
test = paste(")")
test
test
print("\"")
test = paste(
# Print a single double quote
single_double_quote <- "\""
print(single_double_quote)  # Output will be: "
cat("\"")
cat("\"")
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing," " ,cat("\""), files[i], cat("\""), " ", cat("\""),  output[i], cat("\""), sep="")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing," " ,"\"", files[i], "\"", " ", "\"",  output[i], "\"", sep="")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, " ", "\"", files[i], "\"", " ", "\"", output[i], "\"", sep="")
}
code.to.process
code.to.process[i] = paste(command.thing, "\"", files[i], "\"", "\"", output[i], "\"", sep=" ")
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '"', files[i], '"', '"', output[i], '"', sep=" ")
}
code.to.process
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, '"', files[i], '"', '"', output[i], '"', sep=" ")
}
code.to.process
code.to.process
code.to.process
?writeLines
writeLines(code.to.process)
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, " ", '"', files[i], '"', " ", '"', output[i], '"', sep="")
}
code.to.process
writeLines(code.to.process)
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, " ", '"', files[i], '"', " ", '"', output[i], '"', sep="")
}
code.to.process
writeLines(code.to.process, con = "batfile.txt")
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
head(jsonlite)
plot(jsonlite)
install.packages("jsonlite")
library(jsonlite)
library(jsonlite)
?strsplit
?strsplit
?fromJSON
?fromJSON
output
fromJSON(output[i])
fromJSON(output[i])
fromJSON(output[1])
code.to.process
output
album
song
artist
list.dirs("~/Documents/GitHub/lab-2-using-libraries-and-objects-in-r-HarrisonWolfe/The Front Bottoms-Talon Of The Hawk-Au Revoir (Adios).json"
)
?str_count
library(stringr)
?str_count
list.dirs("Song")
list.files("Song")
?str_split
library(stringr)
?str_split
Cool.Song = list.files("Song")
Split.Song.Name = str_split_i(Cool.Song, "-", 3)
Split.Song.Name
?str_sub
split.song.name.post = str_sub(split.song.name.pre, start = 4, end = 6)
Cool.Song = list.files("Song")
split.song.name.pre = str_split_i(Cool.Song, "-", 3)
split.song.name.post = str_sub(split.song.name.pre, start = 4, end = 6)
split.song.name.post
Cool.Song = list.files("Song")
split.song.name.pre = str_split_i(Cool.Song, "-", 3)
split.song.name.post = str_sub(split.song.name.pre, start = 1, end = 12)
split.song.name.post
Cool.Song = list.files("Song")
split.song.name.pre = str_split_i(Cool.Song, "-", 3)
split.song.name.post = str_sub(split.song.name.pre, start = 1, end = 16)
split.song.name.post
Cool.Song = list.files("Song")
split.song.name.pre = str_split_i(Cool.Song, "-", 3)
name.of.new.song = str_sub(split.song.name.pre, start = 1, end = 17)
name.of.new.song
Cool.Song
album.of.new.song = str_split_i(Cool.Song, "-", 2)
album.of.new.song
Cool.Song = list.files("Song")
split.song.name.pre = str_split_i(Cool.Song, "-", 3)
name.of.new.song = str_sub(split.song.name.pre, start = 1, end = 17)
name.of.new.song
album.of.new.song = str_split_i(Cool.Song, "-", 2)
album.of.new.song
artist.of.new.song = str_split_i(Cool.Song, "-", 1)
artist.of.new.song
library(jsonlite)
?fromJSON
fromJSON(Cool.Song)
data.of.new.song = fromJSON(Cool.Song)
View(data.of.new.song)
entires.to.get = c(average_loudness, spectral_energy, danceability, bpm, key_key, key_scale, length)
source("~/Documents/GitHub/lab-2-using-libraries-and-objects-in-r-HarrisonWolfe/ScriptForLab2.R", echo=TRUE)
install.packages("stringr")
entires.to.get = c("average_loudness", "spectral_energy", "danceability", "bpm", "key_key", "key_scale", "length")
data.of.new.song[entries.to.get]
entires.to.get = c("average_loudness", "spectral_energy", "danceability", "bpm", "key_key", "key_scale", "length")
data.of.new.song[entries.to.get]
entries.to.get = c("average_loudness", "spectral_energy", "danceability", "bpm", "key_key", "key_scale", "length")
data.of.new.song[entries.to.get]
data.of.new.song[[entries.to.get]]
list[[average_loudness]]
data.of.new.song[[average_loudness]]
data.of.new.song = fromJSON(Cool.Song)
data.of.new.song$average_loudness
data.of.new.song$"average_loudness"
data.of.new.song[[lowlevel]]
install.packages("stringr")
library(stringr)
list.dirs("Music")
direct = list.dirs("Music") #Saving as a vector
str_count(direct, pattern = "/") #Finding the subdirectories
subdirectnums = c(3, 4, 5, 6, 8, 9, 10) #The number of lines that have subdirectories
direct[subdirectnums] #Vector of subdirect
subdirectories = direct[subdirectnums] #Saving new vector of sub
files = c()
song.name = c()
for(x in subdirectories){
song.name = list.files(x)
for(i in 1:length(song.name)){
files = c(files, song.name[i])
}
}
files
str.count(files, pattern = "wav")
data.of.new.song[[entries.to.get]]
data.of.new.song = fromJSON(Cool.Song)
data.of.new.song
data.of.new.song[lowlevel, ]
data.of.new.song["lowlevel", ]
data.of.new.song$loudness
data.of.new.song$bpm
str(data.of.new.song)
data.of.new.song[["lowlevel"]][["average_loudness"]]
data.of.new.song[["lowlevel"]][["spectral_energy"]][["mean"]]
View(data.of.new.song)
data.of.new.song[["lowlevel"]][["average_loudness"]]
data.of.new.song[["lowlevel"]][["spectral_energy"]][["mean"]]
data.of.new.song[["rhythm"]][["danceability"]]
data.of.new.song[["rhythm"]][["bpm"]]
data.of.new.song[["tonal"]][["key_key"]]
data.of.new.song[["tonal"]][["key_scale"]]
data.of.new.song[["metadata"]][["audio_properties"]][["length"]]
install.packages("stringr")
library(stringr)
list.dirs("Music")
direct = list.dirs("Music") #Saving as a vector
str_count(direct, pattern = "/") #Finding the subdirectories
subdirectnums = c(3, 4, 5, 6, 8, 9, 10) #The number of lines that have subdirectories
direct[subdirectnums] #Vector of subdirect
subdirectories = direct[subdirectnums] #Saving new vector of sub
files = c()
song.name = c()
for(x in subdirectories){
song.name = list.files(x)
for(i in 1:length(song.name)){
files = c(files, song.name[i])
}
}
files
str.count(files, pattern = "wav")
str.count(files, pattern = "wav")
files
library(stringr)
install.packages("stringr")
library(stringr)
list.dirs("Music")
direct = list.dirs("Music") #Saving as a vector
str_count(direct, pattern = "/") #Finding the subdirectories
subdirectnums = c(3, 4, 5, 6, 8, 9, 10) #The number of lines that have subdirectories
direct[subdirectnums] #Vector of subdirect
subdirectories = direct[subdirectnums] #Saving new vector of sub
files = c()
song.name = c()
for(x in subdirectories){
song.name = list.files(x)
for(i in 1:length(song.name)){
files = c(files, song.name[i])
}
}
files
str.count(files, pattern = "wav")
install.packages("stringr")
library(stringr)
list.dirs("Music")
direct = list.dirs("Music") #Saving as a vector
str_count(direct, pattern = "/") #Finding the subdirectories
subdirectnums = c(3, 4, 5, 6, 8, 9, 10) #The number of lines that have subdirectories
direct[subdirectnums] #Vector of subdirect
subdirectories = direct[subdirectnums] #Saving new vector of sub
files = c()
song.name = c()
for(x in subdirectories){
song.name = list.files(x)
for(i in 1:length(song.name)){
files = c(files, song.name[i])
}
}
files
str.count(files, pattern = "wav")
data.of.new.song[["metadata"]][["audio_properties"]][["length"]]
str_count
str_count(files, pattern = "wav")
install.packages("stringr")
library(stringr)
list.dirs("Music")
direct = list.dirs("Music") #Saving as a vector
str_count(direct, pattern = "/") #Finding the subdirectories
subdirectnums = c(3, 4, 5, 6, 8, 9, 10) #The number of lines that have subdirectories
direct[subdirectnums] #Vector of subdirect
subdirectories = direct[subdirectnums] #Saving new vector of sub
files = c()
song.name = c()
for(x in subdirectories){
song.name = list.files(x)
for(i in 1:length(song.name)){
files = c(files, song.name[i])
}
}
files
str_count(files, pattern = "wav")
code.to.process = c() #Empty Vecotr
file.paths = c()
#Putting the thingys together
for(y in 1:length(files)){
file.paths[y] = paste(subdirectories[ceiling(0.5*y)],"/",files[y], sep="")
}
file.paths
track = c()
split.tracks=c()
song=c()
#Removing .wav/splitting up everything/isolating the song
for(i in 1:length(files)){
track[i] = str_sub(files[i], 1, length(files[i])-6)
split.tracks = c(split.tracks, str_split_1(track[i], "-"))
song[i] = split.tracks[3*i]
}
song
album=c()
artist=c()
#Putting the artist in one vector and putting album in another
for(i in 1:length(file.paths)){
artist = c(artist, str_split_i(file.paths[i], "/", 2))
album = c(album, str_split_i(file.paths[i], "/", 3))
}
output = c()
#Throwing everything together into an outpute file
for(i in 1:14){
output = c(output, paste(artist[i], "-", album[i], "-", song[i], ".json", sep=""))
}
output
#Naming the thingy
command.thing = "streaming_extractor_music.exe"
#Makes the vector of the codes
for(i in 1:length(output)){
code.to.process[i] = paste(command.thing, " ", '"', files[i], '"', " ", '"', output[i], '"', sep="")
}
#Puts the codes in the batfile thingy majig
writeLines(code.to.process, con = "batfile.txt")
########
#Task 2
########
install.packages("jsonlite")
library(jsonlite)
Cool.Song = list.files("Song")
split.song.name.pre = str_split_i(Cool.Song, "-", 3)
name.of.new.song = str_sub(split.song.name.pre, start = 1, end = 17)
name.of.new.song
album.of.new.song = str_split_i(Cool.Song, "-", 2)
album.of.new.song
artist.of.new.song = str_split_i(Cool.Song, "-", 1)
artist.of.new.song
data.of.new.song = fromJSON(Cool.Song)
entries.to.get = c("average_loudness", "spectral_energy", "danceability", "bpm", "key_key", "key_scale", "length")
data.of.new.song[["lowlevel"]][["average_loudness"]]
data.of.new.song[["lowlevel"]][["spectral_energy"]][["mean"]]
data.of.new.song[["rhythm"]][["danceability"]]
data.of.new.song[["rhythm"]][["bpm"]]
data.of.new.song[["tonal"]][["key_key"]]
data.of.new.song[["tonal"]][["key_scale"]]
data.of.new.song[["metadata"]][["audio_properties"]][["length"]]
<<eval=FALSE, "scriptsize">>=
song.name
files
library(jsonlite)
citation("jsonlite")
library(stringr)
citation("stringr")
View(batchfile.txt)
writeLines(code.to.process, con = "batfile.txt")
